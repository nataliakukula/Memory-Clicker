{"version":3,"sources":["images/gif-1.gif","images/gif-2.gif","images/gif-3.gif","images/gif-4.gif","images/gif-5.gif","images/gif-6.gif","images/gif-7.gif","images/gif-8.gif","images/gif-9.gif","images/gif-10.gif","images/gif-11.gif","images/gif-12.gif","components/Header/index.js","components/Gif/index.js","components/Directions/index.js","images.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","className","animateMessage","message","currentScore","topScore","Gif","src","alt","onClick","handleGifClick","id","Directions","images","gif1","gif2","gif3","gif4","gif5","gif6","gif7","gif8","gif9","gif10","gif11","gif12","App","state","gifs","clicked","_this","slice","findIndex","clickedElement","push","length","setState","sort","Math","random","_this2","this","turnOffanimateMessage","setTimeout","clearTimeout","_this3","map","gif","i","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19e5beb2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gif-1.5ef0b70e.gif\";","module.exports = __webpack_public_path__ + \"static/media/gif-2.ed0ebb2d.gif\";","module.exports = __webpack_public_path__ + \"static/media/gif-3.e3240235.gif\";","module.exports = __webpack_public_path__ + \"static/media/gif-4.acc9eca3.gif\";","module.exports = __webpack_public_path__ + \"static/media/gif-5.2d64d1c1.gif\";","module.exports = __webpack_public_path__ + \"static/media/gif-6.1d9752c7.gif\";","module.exports = __webpack_public_path__ + \"static/media/gif-7.a8db4ab8.gif\";","module.exports = __webpack_public_path__ + \"static/media/gif-8.b99b70a0.gif\";","module.exports = __webpack_public_path__ + \"static/media/gif-9.a0275314.gif\";","module.exports = __webpack_public_path__ + \"static/media/gif-10.f3c33b64.gif\";","module.exports = __webpack_public_path__ + \"static/media/gif-11.657abfbb.gif\";","module.exports = __webpack_public_path__ + \"static/media/gif-12.9d9f2a7d.gif\";","import React from 'react';\nimport \"./animate.css\";\n\nexport default (props) => {\n    return (\n        <header className=\"nav-container\">\n            <div>MEMORY CLICKER</div>\n            <div\n                className={props.animateMessage ? \"animate-message\" : \"\"}>{props.message}\n            </div>\n            <div> Current score: {props.currentScore}</div>\n            <div>Top score: {props.topScore}</div>\n        </header >\n    )\n}","import React from 'react';\n\nexport default (props) => {\n\n    return (\n\n        <img className=\"gif\" src={props.src} alt=\"gif\" onClick={() => props.handleGifClick(props.id)} />\n\n    )\n}","import React from 'react';\n\nexport default () => {\n\n    return (\n\n        <div className=\"directions-container\">\n            <p className=\"directions-title\">Memorize all 12 sloth clicks!</p>\n            <p>You win when you click each sloth once.</p>\n        </div>\n\n    )\n}","//Importing images to display:\nimport gif1 from './images/gif-1.gif'\nimport gif2 from './images/gif-2.gif'\nimport gif3 from './images/gif-3.gif'\nimport gif4 from './images/gif-4.gif'\nimport gif5 from './images/gif-5.gif'\nimport gif6 from './images/gif-6.gif'\nimport gif7 from './images/gif-7.gif'\nimport gif8 from './images/gif-8.gif'\nimport gif9 from './images/gif-9.gif'\nimport gif10 from './images/gif-10.gif'\nimport gif11 from './images/gif-11.gif'\nimport gif12 from './images/gif-12.gif'\n\nconst images = [\n    { id: 1, src: gif1 },\n    { id: 2, src: gif2 },\n    { id: 3, src: gif3 },\n    { id: 4, src: gif4 },\n    { id: 5, src: gif5 },\n    { id: 6, src: gif6 },\n    { id: 7, src: gif7 },\n    { id: 8, src: gif8 },\n    { id: 9, src: gif9 },\n    { id: 10, src: gif10 },\n    { id: 11, src: gif11 },\n    { id: 12, src: gif12 },\n]\n\nexport default images;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Gif from './components/Gif';\nimport Directions from './components/Directions';\nimport images from './images';\n\nclass App extends Component {\n\n  state = {\n    currentScore: 0,\n    topScore: 0,\n    message: \"\",\n    animateMessage: false,\n    gifs: images,\n    clicked: []\n  }\n\n  componentDidUpdate() {\n    if (this.state.animateMessage) {\n      // when the state is updated (message is anitmated), \n      // a timeout is triggered to switch it back off\n      this.turnOffanimateMessage = setTimeout(() => {\n        this.setState(() => ({ animateMessage: false }))\n      }, 500);\n    }\n  }\n  componentWillUnmount() {\n    // we set the timeout so that we can clean it up when the component is unmounted\n    // otherwise you could get your app trying to modify the state on an\n    // unmounted component, which will throw an error\n    clearTimeout(this.turnOffanimateMessage);\n  }\n\n  handleGifClick = (id) => {\n    // console.log(this.state.animateMessage);\n    // Creating a new copy of clicked array by .slice()\n    let clicked = this.state.clicked.slice(0);\n    //Check if an element was already clicked by comparing values of id's\n    const clickCheck = clickedElement => id === clickedElement;\n    //.findIndex() array method takes a call back function(with an element, index, array)\n    // and retuns the index of first instance from the array\n    // -1 is retuned when item is not found and is pushed to the clicked array\n    if (clicked.findIndex(clickCheck) === -1) {\n\n      clicked.push(id);\n      //you win\n      (clicked.length === 12) ?\n        this.setState({\n          \"currentScore\": this.state.currentScore + 1,\n          \"topScore\": clicked.length,\n          \"message\": \"Woohoo, you win!\"\n        })\n        :\n        //update current score\n        this.setState({\n          \"currentScore\": this.state.currentScore + 1,\n          \"message\": \"Good click, keep going!\",\n          \"clicked\": clicked\n        })\n\n    } else if (clicked.length > this.state.topScore) {\n      // update new top score and start over\n      this.setState({\n        \"topScore\": clicked.length,\n        \"currentScore\": 0,\n        \"message\": \"DOUBLE CLICK, try again!\",\n        \"clicked\": []\n      })\n\n    } else {\n      // start over\n      this.setState({\n        \"currentScore\": 0,\n        \"message\": \"DOUBLE CLICK, try again!\",\n        \"clicked\": []\n      })\n\n    };\n\n    let gifs = this.state.gifs.slice(0);\n    // Mix gifs by array.sort() -> takes a call back comparison function to sort numerically (positve asc., negavite desc.)\n    // Math.random() - 0.5 works here to randomize, because it equally retuns negative and postive numbers\n    gifs.sort(() => Math.random() - 0.5);\n    // the new random array is set in the place of the original gifs\n    // set the nameClass for the text animation back to false\n    this.setState({\n      \"gifs\": gifs,\n      \"animateMessage\": true\n    });\n\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header\n          animateMessage={this.state.animateMessage}\n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore}\n          message={this.state.message}\n        />\n        <Directions />\n        <div className=\"gif-container\">\n          {this.state.gifs.map((gif, i) => (\n            <Gif\n              key={i}\n              src={gif.src}\n              id={gif.id}\n              handleGifClick={this.handleGifClick}\n            />\n          ))}\n        </div>\n        <footer>SLOTHS ARE COOL INC.</footer>\n      </div >\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}